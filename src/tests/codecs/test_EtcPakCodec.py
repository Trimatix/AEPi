from PIL.Image import Image
from AEPi import CompressionFormat
from AEPi.codecs.EtcPakCodec import EtcPakCodec
from PIL import Image
import pytest

from AEPi.constants import CompressionFormat

# Paths to the smiley image PNGs, after a round trip of compression and then decompression using AEIEditor.
SMILEY_ROUNDTRIP_PNG_PATHS = {
    CompressionFormat.PVRTC14A: "src/tests/assets/roundtrip/RGB/smiley_PVRTC14A.png",
    CompressionFormat.ATC: "src/tests/assets/roundtrip/RGB/smiley_ATC.png",
    CompressionFormat.DXT1: "src/tests/assets/roundtrip/RGB/smiley_DXT1.png",
    CompressionFormat.DXT5: "src/tests/assets/roundtrip/RGB/smiley_DXT5.png",
    CompressionFormat.ETC1: "src/tests/assets/roundtrip/RGB/smiley_ETC1.png",
}

# This is the raw pixels of the smiley image compressed using AEIEditor.
SMILEY_COMPRESSED_RAW = {
    CompressionFormat.PVRTC14A: b"\x00\x55\xFF\xFF\x1A\x80\xFF\xFF\xFF\xFF\xFF\xFF\x00\x80\xFF\xFF\x00\x55\xFF\xFF\x5C\x80\xFF\xFF\xFF\xFF\xFC\xFF\x00\x80\xFF\xFF\xFF\xFF\x3F\xFF\x00\x80\xFF\xFF\xFF\xFF\xFF\xFF\x90\xB9\xFF\xFF\xFF\xFF\xFF\x00\x60\xCC\xFF\xFF\x03\xC3\xFF\xFF\x4E\xD5\xFF\xFF\x00\x55\xFF\xFF\x1C\x88\xFF\xFF\xFF\xFF\xCF\xFF\x00\x80\xFF\xFF\x00\xD5\xFF\xFF\x5E\x9C\xFF\xFF\xFF\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\x80\xFF\xFF\xFF\xFF\xFF\xFF\x8C\xA9\xFF\xFF\xFF\xFF\xF3\xFC\x00\x80\xFF\xFF\xFF\xFF\x3F\x00\xA2\xA5\xFF\xFF\x00\x55\xFF\xFF\x1A\x80\xFF\xFF\xFF\xFF\xFF\xFF\x00\x80\xFF\xFF\x00\x55\xFF\xFF\x5C\x80\xFF\xFF\xFF\xFF\xFC\xFF\x00\x80\xFF\xFF\xFF\xFF\x3F\xFF\x00\x80\xFF\xFF\xFF\xFF\xFF\xFF\x90\xB9\xFF\xFF\xFF\xFF\xFF\x00\x60\xCC\xFF\xFF\x03\xC3\xFF\xFF\x4E\xD5\xFF\xFF\x00\x55\xFF\xFF\x1C\x88\xFF\xFF\xFF\xFF\xCF\xFF\x00\x80\xFF\xFF\x00\xD5\xFF\xFF\x5E\x9C\xFF\xFF\xFF\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\x80\xFF\xFF\xFF\xFF\xFF\xFF\x8C\xA9\xFF\xFF\xFF\xFF\xF3\xFC\x00\x80\xFF\xFF\xFF\xFF\x3F\x00\xA2\xA5\xFF\xFF",
    CompressionFormat.ATC: b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF7\x20\xFF\xFF\x00\x55\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF7\x20\xFF\xFF\x00\x55\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF7\x20\xFF\xFF\x00\x55\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF7\x20\xFF\xFF\x00\xD5\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\xFF\xFF\xFF\xFF\xFC\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\xFF\xFF\xFF\xFF\xCF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\xFF\xFF\xFF\xFF\x3F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE7\xD0\xFF\xFF\xFF\xFF\xFF\xA8\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\xFF\xFF\xFF\xFF\xFF\x00\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\xFF\xFF\xFF\xFF\xF3\xFC\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE7\x54\xFF\xFF\x03\xC3\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x25\xFF\xFF\xFF\xFF\x3F\x00",
    CompressionFormat.DXT1: b"\xDF\xFF\x97\x39\x55\xFF\x00\x00\xDF\xFF\x97\x39\x55\xFF\x00\x00\xDF\xFF\x97\x39\x55\xFF\x00\x00\xDF\xFF\x97\x39\x55\x3F\x00\x00\x00\x00\xFF\xFF\x55\x55\x55\x55\x00\x00\xFF\xFF\x55\x55\x54\x55\x00\x00\xFF\xFF\x55\x55\x45\x55\x00\x00\xFF\xFF\x55\x55\x55\x55\x00\x00\xFF\xFF\x55\x55\x15\x55\xDF\xFF\x00\x38\x00\x00\x00\xFD\x00\x00\xFF\xFF\x55\x55\x55\x00\x00\x00\xFF\xFF\x55\x55\x51\x54\x00\x00\xFF\xFF\x55\x55\x55\x55\xC7\xA1\xFF\xFF\x01\x41\x55\x55\x00\x00\xFF\xFF\x55\x55\x55\x55\x07\x4B\xFF\xFF\x55\x55\x15\x00",
    CompressionFormat.DXT5: b"\x00\x05\xFF\xFF\xFF\xFF\xFF\xFF\xDF\xFF\x97\x39\x55\xFF\x00\x00\x00\x05\xFF\xFF\xFF\xFF\xFF\xFF\xDF\xFF\x97\x39\x55\xFF\x00\x00\x00\x05\xFF\xFF\xFF\xFF\xFF\xFF\xDF\xFF\x97\x39\x55\xFF\x00\x00\x00\x05\xFF\xFF\xFF\xFF\xFF\xFF\xDF\xFF\x97\x39\x55\x3F\x00\x00\x00\x05\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x05\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\x00\x00\x01\x00\x00\x05\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\x00\x00\x10\x00\x00\x05\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x05\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\x00\x00\x40\x00\x00\x05\xFF\xFF\xFF\xFF\xFF\xFF\xDF\xFF\x00\x38\x00\x00\x00\xFD\x00\x05\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\x00\x00\x00\x55\x00\x05\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\x00\x00\x04\x01\x00\x05\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x05\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC7\xA1\x54\x14\x00\x00\x00\x05\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x05\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x07\x4B\x00\x00\x40\x55",
    CompressionFormat.ETC1: b"\x5E\x57\xC4\xBF\x11\x11\xCC\xCC\x5E\x57\xC4\xBF\x11\x11\xCC\xCC\x5E\x57\xC4\xBF\x11\x11\xCC\xCC\x99\x91\xF8\xDA\x13\x33\xFD\xDD\xF8\xF8\xF8\x02\x00\x00\x00\x00\x48\x48\x48\xFF\x00\x04\xFF\xFF\x48\x48\x48\xFF\x04\x00\xFF\xFF\xF8\xF8\xF8\x02\x00\x00\x00\x00\x48\x48\x48\xFF\x40\x00\xFF\xFF\xCC\x66\x66\xFC\x88\x88\x77\x7F\xF8\xF8\xF8\x1D\x88\x88\xCC\xCC\x48\x48\x48\xFF\x00\x48\xFF\xFF\xF8\xF8\xF8\x02\x00\x00\x00\x00\xDD\x66\x66\xFC\x13\x30\xEC\xCF\xF8\xF8\xF8\x02\x00\x00\x00\x00\x7F\x9E\x6F\xFE\xC8\x88\x37\x77\x5E\x57\xC4\xBF\x11\x11\xCC\xCC\x5E\x57\xC4\xBF\x11\x11\xCC\xCC\x5E\x57\xC4\xBF\x11\x11\xCC\xCC\x99\x91\xF8\xDA\x13\x33\xFD\xDD\xF8\xF8\xF8\x02\x00\x00\x00\x00\x48\x48\x48\xFF\x00\x04\xFF\xFF\x48\x48\x48\xFF\x04\x00\xFF\xFF\xF8\xF8\xF8\x02\x00\x00\x00\x00\x48\x48\x48\xFF\x40\x00\xFF\xFF\xCC\x66\x66\xFC\x88\x88\x77\x7F\xF8\xF8\xF8\x1D\x88\x88\xCC\xCC\x48\x48\x48\xFF\x00\x48\xFF\xFF\xF8\xF8\xF8\x02\x00\x00\x00\x00\xDD\x66\x66\xFC\x13\x30\xEC\xCF\xF8\xF8\xF8\x02\x00\x00\x00\x00\x7F\x9E\x6F\xFE\xC8\x88\x37\x77",
}

CODEC = EtcPakCodec()

def smileyRoundtripImage(format: CompressionFormat):
    png = Image.open(SMILEY_ROUNDTRIP_PNG_PATHS[format])

    if png.mode != format.pillowMode:
        return png.convert(format.pillowMode)
    
    return png


@pytest.mark.codecs
@pytest.mark.codecs_DXT1
def test_decompress_DXT1_succeeds():
    with smileyRoundtripImage(CompressionFormat.DXT1) as expected:
        compressed = SMILEY_COMPRESSED_RAW[CompressionFormat.DXT1]
        actual = CODEC.decompress(compressed, CompressionFormat.DXT1, expected.width, expected.height, None) \
            .convert(expected.mode)
        for coords in zip(range(expected.width), range(expected.height)):
            assert expected.getpixel(coords) == actual.getpixel(coords) # type: ignore[reportUnknownMemberType]


@pytest.mark.codecs
@pytest.mark.codecs_DXT5
def test_decompress_DXT5_succeeds():
    with smileyRoundtripImage(CompressionFormat.DXT5) as expected:
        compressed = SMILEY_COMPRESSED_RAW[CompressionFormat.DXT5]
        actual = CODEC.decompress(compressed, CompressionFormat.DXT5, expected.width, expected.height, None) \
            .convert(expected.mode)
        for coords in zip(range(expected.width), range(expected.height)):
            assert expected.getpixel(coords) == actual.getpixel(coords) # type: ignore[reportUnknownMemberType]


@pytest.mark.codecs
@pytest.mark.codecs_ETC1
def test_decompress_ETC1_succeeds():
    with smileyRoundtripImage(CompressionFormat.ETC1) as expected:
        compressed = SMILEY_COMPRESSED_RAW[CompressionFormat.ETC1]
        actual = CODEC.decompress(compressed, CompressionFormat.ETC1, expected.width, expected.height, None) \
            .convert(expected.mode)
        for coords in zip(range(expected.width), range(expected.height)):
            assert expected.getpixel(coords) == actual.getpixel(coords) # type: ignore[reportUnknownMemberType]
